From cbce811777331869e4b2ef3b5cc04de0dc9a0d05 Mon Sep 17 00:00:00 2001
From: Cheng-mean Liu <soccerl@microsoft.com>
Date: Tue, 27 Jun 2017 20:04:44 -0700
Subject: [PATCH] Added vsock transport support to 9pfs

Signed-off-by: Cheng-mean Liu <soccerl@microsoft.com>

---
 net/9p/trans_fd.c | 77 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 76 insertions(+), 1 deletion(-)
 mode change 100644 => 100755 net/9p/trans_fd.c

diff --git a/net/9p/trans_fd.c b/net/9p/trans_fd.c
old mode 100644
new mode 100755
index 7bc2208..bd28173
--- a/net/9p/trans_fd.c
+++ b/net/9p/trans_fd.c
@@ -44,8 +44,8 @@
 #include <net/9p/9p.h>
 #include <net/9p/client.h>
 #include <net/9p/transport.h>
-
 #include <linux/syscalls.h> /* killme */
+#include <linux/vm_sockets.h>
 
 #define P9_PORT 564
 #define MAX_SOCK_BUF (64*1024)
@@ -155,6 +155,7 @@ struct p9_trans_fd {
 	struct p9_conn conn;
 };
 
+
 static void p9_poll_workfn(struct work_struct *work);
 
 static DEFINE_SPINLOCK(p9_poll_lock);
@@ -740,6 +741,7 @@ static int parse_opts(char *params, struct p9_fd_opts *opts)
 	opts->wfd = ~0;
 	opts->privport = 0;
 
+
 	if (!params)
 		return 0;
 
@@ -1035,6 +1037,65 @@ p9_fd_create(struct p9_client *client, const char *addr, char *args)
 	return 0;
 }
 
+static int
+p9_fd_create_vsock(struct p9_client *client, const char *addr, char *args)
+{
+	int err;
+	struct socket *csocket;
+	struct sockaddr_vm server_socket_addr;
+	struct p9_fd_opts opts;
+
+	err = parse_opts(args, &opts);
+	if (err < 0)
+		return err;
+
+	csocket = NULL;
+
+	// create socket
+	err = __sock_create(current->nsproxy->net_ns,
+		                AF_VSOCK,
+		                SOCK_STREAM,
+                                0,
+                                &csocket, 1);
+	if (err) {
+		pr_err("%s:__sock_create (%d): problem creating socket (err=%d)\n",
+			__func__, task_pid_nr(current), err);
+		return err;
+	}
+
+	// server socket address information
+	memset((char *)&server_socket_addr, 0, sizeof(struct sockaddr_vm));
+	server_socket_addr.svm_family = AF_VSOCK;
+	server_socket_addr.svm_reserved1 = 0;
+	server_socket_addr.svm_cid = VMADDR_CID_HOST;
+
+	/* Connecting to the host's 0000pppp-facb-11e6-bd58-64006a7986d3 */
+	server_socket_addr.svm_port = opts.port;
+	pr_err("%s:opts.port=(%d)(0x%x)\n", __func__, opts.port, opts.port);
+	pr_err("%s: service_id:(hex) 0000%x%x-facb-11e6-bd58-64006a7986d3\n",
+               __func__,
+               (__u8)((opts.port & 0xff00) >> 8),
+               (__u8)(opts.port & 0x00ff));
+
+	pr_err("%s: connecting", __func__);
+	err = csocket->ops->connect(csocket,
+                                    (struct sockaddr *)&server_socket_addr,
+                                    sizeof(struct sockaddr_vm), 0);
+	if (err < 0) {
+		pr_err("%s:connect (%d): problem connecting socket to %s (err = %d)\n",
+                       __func__, task_pid_nr(current), addr, err);
+                sock_release(csocket);
+                return err;
+	}
+
+	err = p9_socket_open(client, csocket);
+	if (err < 0) {
+            pr_err("%s: p9_socket_open failed\n", __func__);
+	}
+
+	return err;
+}
+
 static struct p9_trans_module p9_tcp_trans = {
 	.name = "tcp",
 	.maxsize = MAX_SOCK_BUF,
@@ -1071,6 +1132,18 @@ static struct p9_trans_module p9_fd_trans = {
 	.owner = THIS_MODULE,
 };
 
+static struct p9_trans_module p9_vsock_trans = {
+	.name = "vsock",
+	.maxsize = MAX_SOCK_BUF,
+	.def = 0,
+	.create = p9_fd_create_vsock,
+	.close = p9_fd_close,
+	.request = p9_fd_request,
+	.cancel = p9_fd_cancel,
+	.cancelled = p9_fd_cancelled,
+	.owner = THIS_MODULE,
+};
+
 /**
  * p9_poll_proc - poll worker thread
  * @a: thread state and arguments
@@ -1108,6 +1181,7 @@ int p9_trans_fd_init(void)
 	v9fs_register_trans(&p9_tcp_trans);
 	v9fs_register_trans(&p9_unix_trans);
 	v9fs_register_trans(&p9_fd_trans);
+	v9fs_register_trans(&p9_vsock_trans);
 
 	return 0;
 }
@@ -1118,4 +1192,5 @@ void p9_trans_fd_exit(void)
 	v9fs_unregister_trans(&p9_tcp_trans);
 	v9fs_unregister_trans(&p9_unix_trans);
 	v9fs_unregister_trans(&p9_fd_trans);
+	v9fs_unregister_trans(&p9_vsock_trans);
 }
-- 
2.7.4

